--SQL Queries and questions:

--To get information on columns of a table, you query the information_schema.columns catalog. For example:
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns
WHERE 
   table_name = 'orders';



--Create a running total of standard_amt_usd (in the orders table) over order time with no date truncation. Your final table should have two columns: one with the amount being added for each new row, and a second with the running total. https://learn.udacity.com/courses/ud198/lessons/30325c41-887d-4247-a128-e267fe28a1fa/concepts/bdca5060-b080-427f-ae73-21aae9da4155

SELECT
    standard_amt_usd AS amount_added,
    SUM(standard_amt_usd) OVER (ORDER BY occurred_at) AS running_total
FROM
    orders;



--Creating a Partitioned Running Total Using Window Functions
--Now, modify your query from the previous quiz to include partitions. Still create a running total of standard_amt_usd (in the orders table) over order time, but this time, date truncate occurred_at by year and partition by that same year-truncated occurred_at variable. Your final table should have three columns: One with the amount being added for each row, one for the truncated date, and a final column with the running total within each year.
--Partitioned to RESTART each year in result set

SELECT
    standard_amt_usd AS amount_added,
    DATE_TRUNC('year', occurred_at) AS truncated_date,
    SUM(standard_amt_usd) OVER (PARTITION BY DATE_TRUNC('year', occurred_at) ORDER BY occurred_at) AS running_total_within_year
FROM
    orders;


--Ranking Total Paper Ordered by Account
Select the id, account_id, and total variable from the orders table, then create a column called total_rank that ranks this total amount of paper ordered (from highest to lowest) for each account using a partition. Your final table should have these four columns.

SELECT
    id,
    account_id,
    total,
    RANK() OVER (PARTITION BY account_id ORDER BY total DESC) AS total_rank
FROM
    orders;


--ALIASING for MULTIPLE WINDOW FUNCTIONS

SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER account_year_window AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER account_year_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER account_year_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER account_year_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER account_year_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER account_year_window AS max_total_amt_usd
FROM orders
WINDOW account_year_window AS (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) 


--Full Outer Join Example FINDING MATCHED AND UNMATCHED ROWS with FULL Outer Join

SELECT *
  FROM accounts
 FULL JOIN sales_reps ON accounts.sales_rep_id = sales_reps.id
--If unmatched rows existed, you could isolate them by adding the following line to the end of the query:
WHERE accounts.sales_rep_id IS NULL OR sales_reps.id IS NULL

--INEQUALITY JOIN EXAMPLE
SELECT accounts.name as account_name,
       accounts.primary_poc as poc_name,
       sales_reps.name as sales_rep_name
  FROM accounts
  LEFT JOIN sales_reps
    ON accounts.sales_rep_id = sales_reps.id
   AND accounts.primary_poc < sales_reps.name
   --WEIRD EXAMPLE -- will return POC names with name alphabetically before sales reps name
   
   --Better example from ChatGPT based on student scores within a range:/
   SELECT 
    students.name,
    students.score,
    score_ranges.ranking
FROM 
    students
JOIN 
    score_ranges ON students.score >= score_ranges.min_score AND students.score <= score_ranges.max_score;

--A MySQL workbench example using the world schema, tables country and countrylanguage
SELECT 
    c.Name AS country_name,
    c.SurfaceArea,
    l.Language AS official_language,
    LENGTH(c.Name) AS country_name_length,
    LENGTH(l.Language) AS language_name_length
FROM 
    country c
JOIN 
    countrylanguage l ON LENGTH(c.Name) < LENGTH(l.Language);
