/* --------------------
   Case Study Questions
   --------------------*/

/*1. What is the total amount each customer spent at the restaurant?
--SELECT
--customer_id,
--SUM(price) total_spend
FROM dannys_diner.sales s
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
GROUP BY customer_id; 
*/
/*2. How many days has each customer visited the restaurant?
SELECT
customer_id,
COUNT(DISTINCT order_date) days
FROM dannys_diner.sales
GROUP BY customer_id;
*/
/* 3. What was the first item from the menu purchased by each customer?
WITH CTE AS(
SELECT
customer_id,
order_date,
product_name,
RANK() OVER(PARTITION BY customer_id ORDER BY order_date ASC) rnk,
ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date ASC) rownum
FROM dannys_diner.sales s
INNER JOIN dannys_diner.menu m on s.product_id=m.product_id
)
SELECT 
customer_id,
product_name
FROM CTE
WHERE rnk = 1 OR rownum=1;
*/
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
/*
SELECT 
product_name,
COUNT(order_date) orders
FROM dannys_diner.sales s
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
GROUP BY product_name
ORDER BY COUNT(order_date) DESC
LIMIT 1;
*/
-- 5. Which item was the most popular for each customer?
/*WITH CTE AS(
SELECT 
product_name,
customer_id,
COUNT(order_date) orders,
RANK() OVER(PARTITION BY customer_id ORDER BY COUNT(order_date) DESC) rnk,
ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY COUNT(order_date) DESC) rownum
FROM dannys_diner.sales s
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
GROUP BY product_name, customer_id
ORDER BY customer_id
)
SELECT
customer_id, product_name
FROM CTE
WHERE rnk=1; --INCLUDES TIES - could use ROWNUMBER but would be ambiguous
*/
-- 6. Which item was purchased first by the customer after they became a member?
/*
WITH CTE AS(
  SELECT 
s.customer_id, 
order_date, 
product_name, 
join_date,
RANK() OVER(PARTITION BY s.customer_id ORDER BY order_date) rnk,
ROW_NUMBER() OVER(PARTITION BY s.customer_id ORDER BY order_date) rownum
FROM dannys_diner.sales s
INNER JOIN dannys_diner.members mem on mem.customer_id = s.customer_id
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
WHERE order_date>=join_date
)
SELECT 
customer_id,
product_name
FROM CTE
WHERE rnk=1
*/
-- 7. Which item was purchased just before the customer became a member?
/*WITH CTE AS(
  SELECT 
s.customer_id, 
order_date, 
product_name, 
join_date,
RANK() OVER(PARTITION BY s.customer_id ORDER BY order_date DESC) rnk,
ROW_NUMBER() OVER(PARTITION BY s.customer_id ORDER BY order_date DESC) rownum
FROM dannys_diner.sales s
INNER JOIN dannys_diner.members mem on mem.customer_id = s.customer_id
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
WHERE order_date<join_date
)
SELECT 
customer_id,
product_name
FROM CTE
WHERE rnk=1
*/
-- 8. What is the total items and amount spent for each member before they became a member?
/*
SELECT 
s.customer_id, 
COUNT(product_name) total_items, 
SUM(price) amount_spent
FROM dannys_diner.sales s
INNER JOIN dannys_diner.members mem on mem.customer_id = s.customer_id
INNER JOIN dannys_diner.menu m on s.product_id = m.product_id
WHERE order_date<join_date
GROUP BY s.customer_id;
*/
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
/*
SELECT 
customer_id,
 SUM(CASE 
  WHEN product_name='sushi' THEN price * 10 * 2
  ELSE price * 10
  END) as points
FROM dannys_diner.menu m
INNER JOIN dannys_diner.sales s ON s.product_id = m.product_id
GROUP BY customer_id;
*/
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
/*SELECT 
s.customer_id,
 SUM(CASE 
  WHEN order_date BETWEEN mem.join_date AND mem.join_date + INTERVAL '6 day' THEN price *10*2
  WHEN product_name='sushi' THEN price * 10 * 2
  ELSE price * 10
  END) as points
FROM dannys_diner.menu m
INNER JOIN dannys_diner.sales s ON s.product_id = m.product_id
INNER JOIN dannys_diner.members mem on mem.customer_id = s.customer_id
WHERE DATE_TRUNC('month', order_date) = '2021-01-01'
GROUP BY s.customer_id;
*/
--BONUS RANK ALL THE THINGS
/*
WITH CTE AS (
SELECT 
s.customer_id, 
order_date,
product_name,
price,
CASE 
 WHEN join_date IS NULL THEN 'N'
 WHEN order_date<join_date THEN 'N'
 ELSE 'Y'
END as member
FROM dannys_diner.sales s
INNER JOIN dannys_diner.menu m on m.product_id=s.product_id
LEFT JOIN dannys_diner.members mem on mem.customer_id = s.customer_id
ORDER BY S.customer_id, order_date, price DESC
)
SELECT *,
 CASE
 WHEN member = 'N' THEN NULL
 ELSE RANK() OVER(PARTITION BY customer_id, member ORDER BY order_date) END rnk
 FROM CTE;
*/
